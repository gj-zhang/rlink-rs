use serbuffer_gen::{Codegen, SchemaBuilder};
use serbuffer_gen::DataType::{F64, I32, I64, STRING, U32, U64};

fn main() {
    Codegen::out_dir("buffer_gen")
        .schema(
            SchemaBuilder::new("alarm_rule")
                .field("ruleId", U32)
                .field("aggregateFieldName", STRING)
                .field("aggregatorFunctionType", STRING)
                .field("groupingKeyNames", STRING)
                .field("limit", U32)
                .field("limitOperatorType", STRING)
                .field("ruleState", STRING)
                .field("windowMinutes", I32)
                .set_serde_derive()
            ,
        )
        .schema(
            SchemaBuilder::new("alarm_event")
                .field("transactionId", I64)
                .field("eventTime", I64)
                .field("payeeId", I64)
                .field("beneficiaryId", I64)
                .field("paymentAmount", F64)
                .field("paymentType", STRING)
                .set_serde_derive()
        )
        .schema(
            SchemaBuilder::new("alarm_rule_event")
                .field("ruleId", U32)
                .field("ruleState", STRING)
                .field("groupingKeyNames", STRING)
                .field("unique", STRING)
                .field("aggregateFieldName", STRING)
                .field("aggregatorFunctionType", STRING)
                .field("limitOperatorType", STRING)
                .field("limit", F64)
                .field("windowMinutes", I32)
                .field("controlType", STRING)
                .field("transactionId", I64)
                .field("eventTime", I64)
                .field("payeeId", I64)
                .field("beneficiaryId", I64)
                .field("paymentAmount", F64)
                .field("paymentType", STRING)
                .field("ingestionTimestamp", U64)
        )
        .schema(SchemaBuilder::new("dynamic_key")
            .field("dynamic_key", STRING)
        )
        .schema(SchemaBuilder::new("alert")
            .field("ruleId", U32)
            .field("violatedRule", STRING)
            .field("key", STRING)
            .field("triggeringEvent", STRING)
            .field("triggeringValue", F64)
        )
        .schema(SchemaBuilder::new("cleanup")
            .field("cleanup_time", I64)
            .set_serde_derive()
        )
        .gen()
        .expect("buffer gen error");
}